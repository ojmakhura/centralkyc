// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.centralkyc.individual;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import java.util.Collection;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;

import bw.co.centralkyc.AuditTracker;
import bw.co.centralkyc.RestApiResponse;
import bw.co.centralkyc.keycloak.KeycloakUserService;
import bw.co.centralkyc.organisation.OrganisationDTO;
import bw.co.centralkyc.organisation.OrganisationListDTO;
import bw.co.centralkyc.organisation.branch.BranchDTO;
import bw.co.centralkyc.organisation.branch.BranchService;
import bw.co.centralkyc.user.UserDTO;

@org.springframework.web.bind.annotation.RestController
public class IndividualApiImpl extends IndividualApiBase {

    private final KeycloakUserService keycloakUserService;
    private final BranchService branchService;

    public IndividualApiImpl(IndividualService individualService, KeycloakUserService keycloakUserService,
            BranchService branchService) {

        super(individualService);
        this.keycloakUserService = keycloakUserService;
        this.branchService = branchService;
    }

    @Override
    public ResponseEntity<RestApiResponse<IndividualDTO>> handleFindById(String id) {
        RestApiResponse<IndividualDTO> responseData = new RestApiResponse<>();
        IndividualDTO data = individualService.findById(id);

        if (data.getHasUser()) {

            UserDTO user = keycloakUserService.getUserByIdentityNo(data.getIdentityNo());

            if (StringUtils.isNotBlank(user.getBranchId())) {

                BranchDTO branch = branchService.findById(user.getBranchId());
                data.setBranch(branch);
            }

            if(StringUtils.isNotBlank(user.getOrganisationId())) {

                OrganisationListDTO orgList = new OrganisationListDTO();
                orgList.setId(user.getOrganisationId());
                orgList.setName(user.getOrganisation());

                data.setOrganisation(orgList);
            }

        }

        responseData.setData(data);
        ResponseEntity<RestApiResponse<IndividualDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<IndividualListDTO>>> handleGetAll() {
        RestApiResponse<Collection<IndividualListDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<IndividualListDTO>> data = Optional.of(individualService.getAll());
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<Collection<IndividualListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<IndividualListDTO>>> handleGetAllPaged(Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<IndividualListDTO>> responseData = new RestApiResponse<>();
        Optional<Page<IndividualListDTO>> data = Optional.of(individualService.getAll(pageNumber, pageSize));
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<Page<IndividualListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Page<IndividualListDTO>>> handlePagedSearch(Integer pageNumber,
            Integer pageSize, String criteria) {
        RestApiResponse<Page<IndividualListDTO>> responseData = new RestApiResponse<>();
        Optional<Page<IndividualListDTO>> data = Optional.of(individualService.search(pageNumber, pageSize, criteria));
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<Page<IndividualListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;
    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        Optional<Boolean> data = Optional.of(individualService.remove(id));
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<Boolean>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<IndividualDTO>> handleSave(IndividualDTO individual) {

        RestApiResponse<IndividualDTO> responseData = new RestApiResponse<>();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        AuditTracker.auditTrail(individual, authentication);

        keycloakUserService.getUserByIdentityNo(individual.getIdentityNo());
        UserDTO user = keycloakUserService.getUserByIdentityNo(individual.getIdentityNo());

        if (user == null) {

            user = new UserDTO();
            user.setFirstName(individual.getFirstName());
            user.setLastName(individual.getSurname());
            user.setEmail(individual.getEmailAddress());
            user.setUsername(individual.getEmailAddress());
            user.setIdentityNo(individual.getIdentityNo());
            user.setPassword("P@ssw0rd");
            user.setEnabled(true);
            user.setBranchId(individual.getBranch().getId());
            user.setBranch(individual.getBranch().getName());
            user.setOrganisation(individual.getOrganisation().getName());
            user.setOrganisationId(individual.getOrganisation().getId());

            user = keycloakUserService.createUser(user);

        }

        Optional<IndividualDTO> data = Optional.of(individualService.save(individual));
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<IndividualDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<IndividualListDTO>>> handleSearch(String criteria) {
        RestApiResponse<Collection<IndividualListDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<IndividualListDTO>> data = Optional.of(individualService.search(criteria));
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<Collection<IndividualListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }
}