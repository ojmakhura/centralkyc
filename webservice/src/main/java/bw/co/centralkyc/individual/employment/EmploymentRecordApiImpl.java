// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.centralkyc.individual.employment;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import bw.co.centralkyc.AuditTracker;
import bw.co.centralkyc.RestApiResponse;

import java.util.Collection;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;

@org.springframework.web.bind.annotation.RestController
public class EmploymentRecordApiImpl extends EmploymentRecordApiBase {

    public EmploymentRecordApiImpl(
            EmploymentRecordService employmentRecordService) {

        super(
                employmentRecordService);
    }

    @Override
    public ResponseEntity<RestApiResponse<EmploymentRecordDTO>> handleFindById(String id) throws Exception {

        try {

            RestApiResponse<EmploymentRecordDTO> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.findById(id));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<EmploymentRecordDTO>> response = ResponseEntity.status(HttpStatus.OK)
                    .body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<EmploymentRecordDTO>>> handleFindByIndividual(String individualId)
            throws Exception {

        try {

            RestApiResponse<Collection<EmploymentRecordDTO>> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.findByIndividual(individualId));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<Collection<EmploymentRecordDTO>>> response = ResponseEntity
                    .status(HttpStatus.OK).body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<EmploymentRecordDTO>>> handleGetAll() throws Exception {

        try {

            RestApiResponse<Collection<EmploymentRecordDTO>> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.getAll());
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<Collection<EmploymentRecordDTO>>> response = ResponseEntity
                    .status(HttpStatus.OK).body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<EmploymentRecordDTO>>> handleGetAllPaged(Integer pageNumber,
            Integer pageSize) throws Exception {

        try {

            RestApiResponse<Page<EmploymentRecordDTO>> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.getAll(pageNumber, pageSize));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<Page<EmploymentRecordDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                    .body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<EmploymentRecordDTO>>> handlePagedSearch(String criteria,
            Integer pageNumber, Integer pageSize) throws Exception {

        try {

            RestApiResponse<Page<EmploymentRecordDTO>> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.search(criteria, pageNumber, pageSize));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<Page<EmploymentRecordDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                    .body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) throws Exception {

        try {

            RestApiResponse<Boolean> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.remove(id));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<Boolean>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<EmploymentRecordDTO>> handleSave(EmploymentRecordDTO employmentRecord)
            throws Exception {

        try {

            RestApiResponse<EmploymentRecordDTO> responseData = new RestApiResponse<>();
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            AuditTracker.auditTrail(employmentRecord, authentication);

            responseData.setData(employmentRecordService.save(employmentRecord));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<EmploymentRecordDTO>> response = ResponseEntity.status(HttpStatus.OK)
                    .body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<EmploymentRecordDTO>>> handleSearch(String criteria)
            throws Exception {

        try {

            RestApiResponse<Collection<EmploymentRecordDTO>> responseData = new RestApiResponse<>();
            responseData.setData(employmentRecordService.search(criteria));
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Operation successful."));
            ResponseEntity<RestApiResponse<Collection<EmploymentRecordDTO>>> response = ResponseEntity
                    .status(HttpStatus.OK).body(responseData);

            return response;

        } catch (Exception e) {

            throw e;
        }
    }
}