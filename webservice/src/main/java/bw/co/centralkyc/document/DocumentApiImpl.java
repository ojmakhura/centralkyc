// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.centralkyc.document;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.security.oauth2.jwt.Jwt;

import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.springframework.core.io.InputStreamResource;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;

import bw.co.centralkyc.AuditTracker;
import bw.co.centralkyc.RestApiResponse;
import bw.co.centralkyc.TargetEntity;
import bw.co.centralkyc.minio.MinioService;

@RestController
public class DocumentApiImpl extends DocumentApiBase {

    private final MinioService minioService;

    public DocumentApiImpl(DocumentService documentService, MinioService minioService) {

        super(documentService);
        this.minioService = minioService;
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> handleFindByDocumentType(String documentTypeId) {
        RestApiResponse<Collection<DocumentDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<DocumentDTO>> data = Optional.of(documentService.findByDocumentType(documentTypeId));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %s documents successfully!", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<DocumentDTO>> handleFindById(String id) {
        RestApiResponse<DocumentDTO> responseData = new RestApiResponse<>();
        Optional<DocumentDTO> data = Optional.of(documentService.findById(id));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(
                String.format("Document %s loaded successfully!", responseData.getData().getDocumentType()));
        ResponseEntity<RestApiResponse<DocumentDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> handleFindByTarget(
            bw.co.centralkyc.TargetEntity target, String targetId) {
        RestApiResponse<Collection<DocumentDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<DocumentDTO>> data = Optional.of(documentService.findByTarget(target, targetId));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %s documents successfully!", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> handleGetAll() {
        RestApiResponse<Collection<DocumentDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<DocumentDTO>> data = Optional.of(documentService.getAll());
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %s documents successfully!", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Page<DocumentDTO>>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        RestApiResponse<Page<DocumentDTO>> responseData = new RestApiResponse<>();
        Optional<Page<DocumentDTO>> data = Optional.of(documentService.getAll(pageNumber, pageSize));
        responseData.setData(data.get());
        ResponseEntity<RestApiResponse<Page<DocumentDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        Optional<Boolean> data = Optional.of(documentService.remove(id));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Document successfully removed!"));
        ResponseEntity<RestApiResponse<Boolean>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<DocumentDTO>> handleSave(DocumentDTO document) {
        RestApiResponse<DocumentDTO> responseData = new RestApiResponse<>();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        AuditTracker.auditTrail(document, authentication);
        Optional<DocumentDTO> data = Optional.of(documentService.save(document));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Document %s saved  successfully!", document.getDocumentType()));
        ResponseEntity<RestApiResponse<DocumentDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> handleSearch(String criteria) {
        RestApiResponse<Collection<DocumentDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<DocumentDTO>> data = Optional.of(documentService.search(criteria));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %s documents successfully!", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<DocumentDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    private String constructFilePath(TargetEntity target, String targetId, String fileName) {
        StringBuilder filePath = new StringBuilder();
        filePath.append(target).append(targetId).append("/").append(fileName);

        return fileName;
    }

    private String uploadToMinio(MultipartFile file, String fileName) throws Exception {
        // Upload the file to MinIO
        try (InputStream inputStream = file.getInputStream()) {

            String url = minioService.uploadFile(fileName, inputStream, file.getSize(), file.getContentType());
            System.out.println("File uploaded to MinIO: " + url);
            return url;

        } catch (IOException e) {
            e.printStackTrace();
            throw new DocumentServiceException("Error uploading file: " + file.getOriginalFilename());
        }
    }

    private InputStreamResource downloadFromMinio(String objectName) throws Exception {
        // Download the file from MinIO
        try (InputStream inputStream = minioService.downloadFile(objectName)) {
            // Process the input stream as needed
            System.out.println("File downloaded from MinIO: " + objectName);
            InputStreamResource resource = new InputStreamResource(inputStream);
            // byte[] fileBytes = inputStream.readAllBytes();
            inputStream.close();
            return resource;

        } catch (IOException e) {
            e.printStackTrace();
            throw new DocumentServiceException("Error downloading file: " + objectName);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<DocumentDTO>> handleUpload(TargetEntity target, String targetId,
            String documentTypeId, MultipartFile file) {
        RestApiResponse<DocumentDTO> responseData = new RestApiResponse<>();

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        System.out.println(authentication);
        Jwt jwt = (Jwt) authentication.getPrincipal();

        System.out.println(jwt.getClaims());

        String username = jwt.getClaimAsString("preferred_username");

        DocumentDTO document = new DocumentDTO();
        document.setCreatedAt(LocalDateTime.now());
        document.setCreatedBy(username);
        document.setTarget(target);
        document.setTargetId(targetId);
        document.setFileName(file.getOriginalFilename());

        Map<String, Object> metadata = new HashMap<>();
        metadata.put("fileSize", file.getSize());
        metadata.put("fileType", file.getContentType());
        metadata.put("contentType", file.getContentType());

        document.setMetadata(metadata);

        String filePath = constructFilePath(target, targetId, file.getOriginalFilename());
        try {
            document.setUrl(uploadToMinio(file, filePath));
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            throw new DocumentServiceException("Error uploading file: " + file.getOriginalFilename());
        }

        document.setDocumentTypeId(documentTypeId);

        Optional<DocumentDTO> data = Optional.of(documentService.save(document)); // TODO: Add custom code here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage("Document uploaded successfully!");
        ResponseEntity<RestApiResponse<DocumentDTO>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

        return response;

    }

    // @Override
    // public ResponseEntity<RestApiResponse<InputStreamResource>> handleDownloadFile(String objectName) {

    //     RestApiResponse<InputStreamResource> responseData = new RestApiResponse<>();

    //     try {
    //         InputStreamResource data = downloadFromMinio(objectName);
    //         responseData.setData(data);
    //         responseData.setSuccess(true);
    //         responseData.setMessage("File downloaded successfully!");
    //         ResponseEntity<RestApiResponse<InputStreamResource>> response = ResponseEntity.status(HttpStatus.OK)
    //                 .body(responseData);

    //         return response;

    //     } catch (Exception e) {
    //         // TODO Auto-generated catch block
    //         e.printStackTrace();
    //         throw new DocumentServiceException("Error downloading file: " + e.getMessage());
    //     }
    // }
}