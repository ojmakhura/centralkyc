// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.centralkyc.document.type;

import java.util.Collection;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import bw.co.centralkyc.AuditTracker;
import bw.co.centralkyc.RestApiResponse;

@org.springframework.web.bind.annotation.RestController
public class DocumentTypeApiImpl extends DocumentTypeApiBase {

    public DocumentTypeApiImpl(
            DocumentTypeService documentTypeService) {

        super(
                documentTypeService);
    }

    @Override
    public ResponseEntity<RestApiResponse<DocumentTypeDTO>> handleFindById(String id) {
        RestApiResponse<DocumentTypeDTO> responseData = new RestApiResponse<>();
        Optional<DocumentTypeDTO> data = Optional.of(documentTypeService.findById(id));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setStatus(HttpStatus.OK.value());
        responseData.setMessage(String.format("Document type %s loaded successfully!", responseData.getData().name));
        ResponseEntity<RestApiResponse<DocumentTypeDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<DocumentTypeDTO>>> handleGetAll() {
        RestApiResponse<Collection<DocumentTypeDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<DocumentTypeDTO>> data = Optional.of(documentTypeService.getAll());
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setStatus(HttpStatus.OK.value());
        responseData.setMessage(String.format("Loaded %d document type.", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<DocumentTypeDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Page<DocumentTypeDTO>>> handleGetAllPaged(Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<DocumentTypeDTO>> responseData = new RestApiResponse<>();
        Optional<Page<DocumentTypeDTO>> data = Optional.of(documentTypeService.getAll(pageNumber, pageSize));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setStatus(HttpStatus.OK.value());
        responseData.setMessage(String.format("Loaded page %d with %d document types.",
                responseData.getData().getNumber(), responseData.getData().getNumberOfElements()));
        ResponseEntity<RestApiResponse<Page<DocumentTypeDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Page<DocumentTypeDTO>>> handlePagedSearch(String criteria, Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<DocumentTypeDTO>> responseData = new RestApiResponse<>();
        Optional<Page<DocumentTypeDTO>> data = Optional.of(documentTypeService.search(criteria, pageNumber, pageSize));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setStatus(HttpStatus.OK.value());
        responseData.setMessage(String.format("Loaded page %d with %d document types.",
                responseData.getData().getNumber(), responseData.getData().getNumberOfElements()));
        ResponseEntity<RestApiResponse<Page<DocumentTypeDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        Optional<Boolean> data = Optional.of(documentTypeService.remove(id));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage("Removed document type.");
        responseData.setStatus(HttpStatus.OK.value());
        ResponseEntity<RestApiResponse<Boolean>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<DocumentTypeDTO>> handleSave(DocumentTypeDTO documentType) {
        RestApiResponse<DocumentTypeDTO> responseData = new RestApiResponse<>();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        AuditTracker.auditTrail(documentType, authentication);
        Optional<DocumentTypeDTO> data = Optional.of(documentTypeService.save(documentType));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage("Document type saves successfully!");
        responseData.setStatus(HttpStatus.OK.value());
        ResponseEntity<RestApiResponse<DocumentTypeDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<DocumentTypeDTO>>> handleSearch(String criteria) {
        RestApiResponse<Collection<DocumentTypeDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<DocumentTypeDTO>> data = Optional.of(documentTypeService.search(criteria));
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %d document types.", responseData.getData().size()));
        responseData.setStatus(HttpStatus.OK.value());
        ResponseEntity<RestApiResponse<Collection<DocumentTypeDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }
}