// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.centralkyc.organisation.branch;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.RestController;

import java.util.Collection;
import java.util.Optional;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;

import bw.co.centralkyc.AuditTracker;
import bw.co.centralkyc.RestApiResponse;

@RestController
public class BranchApiImpl extends BranchApiBase {
    
    public BranchApiImpl(
        BranchService branchService    ) {
        
        super(
            branchService        );
    }


    @Override
    public ResponseEntity<RestApiResponse<BranchDTO>> handleFindById(java.lang.String id) {
        RestApiResponse<BranchDTO> responseData = new RestApiResponse<>();
        try {
            Optional<BranchDTO> data = Optional.of(branchService.findById(id));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Branch %s loaded.", responseData.getData().getName()));
            ResponseEntity<RestApiResponse<BranchDTO>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<BranchDTO>>> handleFindByOrganisation(java.lang.String organisationId) {
        RestApiResponse<Collection<BranchDTO>> responseData = new RestApiResponse<>();
        try {
            Optional<Collection<BranchDTO>> data = Optional.of(branchService.findByOrganisation(organisationId));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Loaded %d branch(es).", responseData.getData().size()));
            ResponseEntity<RestApiResponse<Collection<BranchDTO>>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<BranchDTO>>> handleFindByOrganisationPaged(java.lang.String organisationId, java.lang.Integer pageNumber, java.lang.Integer pageSize) {
        RestApiResponse<Collection<BranchDTO>> responseData = new RestApiResponse<>();
        try {
            Optional<Collection<BranchDTO>> data = Optional.of(branchService.findByOrganisation(organisationId, pageNumber, pageSize));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Loaded %d branches.", responseData.getData().size()));
            ResponseEntity<RestApiResponse<Collection<BranchDTO>>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<BranchDTO>>> handleGetAll() {
        RestApiResponse<Collection<BranchDTO>> responseData = new RestApiResponse<>();
        try {
            Optional<Collection<BranchDTO>> data = Optional.of(branchService.getAll());
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Loaded %d branch(es).", responseData.getData().size()));
            ResponseEntity<RestApiResponse<Collection<BranchDTO>>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Page<BranchDTO>>> handleGetAllPaged(java.lang.Integer pageNumber, java.lang.Integer pageSize) {
        RestApiResponse<Page<BranchDTO>> responseData = new RestApiResponse<>();
        try {
            Optional<Page<BranchDTO>> data = Optional.of(branchService.getAll(pageNumber, pageSize));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Loaded page %d of branches.", responseData.getData().getNumber()));
            ResponseEntity<RestApiResponse<Page<BranchDTO>>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Page<BranchDTO>>> handlePagedSearch(java.lang.String criteria, java.lang.Integer pageNumber, java.lang.Integer pageSize) {
        RestApiResponse<Page<BranchDTO>> responseData = new RestApiResponse<>();
        try {
            Optional<Page<BranchDTO>> data = Optional.of(branchService.search(criteria, pageNumber, pageSize));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Loaded page %d of branches.", responseData.getData().getNumber()));
            ResponseEntity<RestApiResponse<Page<BranchDTO>>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<java.lang.Boolean>> handleRemove(java.lang.String id) {
        RestApiResponse<java.lang.Boolean> responseData = new RestApiResponse<>();
        try {
            Optional<java.lang.Boolean> data = Optional.of(branchService.remove(id));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Branch removed."));
            ResponseEntity<RestApiResponse<java.lang.Boolean>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<BranchDTO>> handleSave(BranchDTO branch) {
        RestApiResponse<BranchDTO> responseData = new RestApiResponse<>();
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            AuditTracker.auditTrail(branch, authentication);
            Optional<BranchDTO> data = Optional.of(branchService.save(branch));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Branch %s saved.", responseData.getData().getName()));
            ResponseEntity<RestApiResponse<BranchDTO>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<BranchDTO>>> handleSearch(java.lang.String criteria) {
        RestApiResponse<Collection<BranchDTO>> responseData = new RestApiResponse<>();
        try {
            Optional<Collection<BranchDTO>> data = Optional.of(branchService.search(criteria));
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setStatus(HttpStatus.OK.value());
            responseData.setMessage(String.format("Loaded %d branch(es).", responseData.getData().size()));
            ResponseEntity<RestApiResponse<Collection<BranchDTO>>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            responseData.setStatus(HttpStatus.BAD_REQUEST.value());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }
}