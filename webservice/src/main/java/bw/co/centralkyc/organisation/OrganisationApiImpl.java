// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.centralkyc.organisation;

import java.util.Collection;
import java.util.Optional;
import java.util.Set;

import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import bw.co.centralkyc.AuditTracker;
import bw.co.centralkyc.PropertySearchOrder;
import bw.co.centralkyc.RestApiResponse;
import bw.co.centralkyc.SearchObject;

@org.springframework.web.bind.annotation.RestController
public class OrganisationApiImpl extends OrganisationApiBase {

    public OrganisationApiImpl(
            OrganisationService organisationService) {

        super(
                organisationService);
    }

    @Override
    public ResponseEntity<RestApiResponse<OrganisationDTO>> handleFindById(String id) {
        RestApiResponse<OrganisationDTO> responseData = new RestApiResponse<>();
        Optional<OrganisationDTO> data = Optional.of(organisationService.findById(id)); // TODO: Add custom code here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Organisation %s loaded.", responseData.getData().getName()));
        ResponseEntity<RestApiResponse<OrganisationDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<OrganisationListDTO>>> handleGetAll() {
        RestApiResponse<Collection<OrganisationListDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<OrganisationListDTO>> data = Optional.of(organisationService.getAll()); // TODO: Add custom
                                                                                                    // code here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %d organisations.", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<OrganisationListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Page<OrganisationListDTO>>> handleGetAllPaged(Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<OrganisationListDTO>> responseData = new RestApiResponse<>();
        Optional<Page<OrganisationListDTO>> data = Optional.of(organisationService.getAll(pageNumber, pageSize)); // TODO:
                                                                                                                  // Add
                                                                                                                  // custom
                                                                                                                  // code
                                                                                                                  // here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded organisation page %d.", responseData.getData().getNumber()));
        ResponseEntity<RestApiResponse<Page<OrganisationListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Page<OrganisationListDTO>>> handlePagedSearch(SearchObject<OrganisationSearchCriteria> criteria) {
        RestApiResponse<Page<OrganisationListDTO>> responseData = new RestApiResponse<>();
        Optional<Page<OrganisationListDTO>> data = Optional
                .of(organisationService.search(criteria)); // TODO: Add custom code here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded organisation page %d.", responseData.getData().getNumber()));
        ResponseEntity<RestApiResponse<Page<OrganisationListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        Optional<Boolean> data = Optional.of(organisationService.remove(id)); // TODO: Add custom code here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Organistaion removed."));
        ResponseEntity<RestApiResponse<Boolean>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

        return response;

    }

    @Override
    public ResponseEntity<RestApiResponse<OrganisationDTO>> handleSave(OrganisationDTO organisation) {
        RestApiResponse<OrganisationDTO> responseData = new RestApiResponse<>();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        AuditTracker.auditTrail(organisation, authentication);
        Optional<OrganisationDTO> data = Optional.of(organisationService.save(organisation)); // TODO: Add custom code
                                                                                              // here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Organisation %s saved.", responseData.getData().getName()));
        ResponseEntity<RestApiResponse<OrganisationDTO>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<OrganisationListDTO>>> handleSearch(SearchObject<OrganisationSearchCriteria> criteria) {
        RestApiResponse<Collection<OrganisationListDTO>> responseData = new RestApiResponse<>();
        Optional<Collection<OrganisationListDTO>> data = Optional.of(organisationService.search(criteria.getCriteria(), (Set<PropertySearchOrder>) criteria.getSortings())); // TODO: Add
                                                                                                            // custom
                                                                                                            // code
                                                                                                            // here;
        responseData.setData(data.get());
        responseData.setSuccess(true);
        responseData.setMessage(String.format("Loaded %d document types.", responseData.getData().size()));
        ResponseEntity<RestApiResponse<Collection<OrganisationListDTO>>> response = ResponseEntity.status(HttpStatus.OK)
                .body(responseData);

        return response;

    }
}