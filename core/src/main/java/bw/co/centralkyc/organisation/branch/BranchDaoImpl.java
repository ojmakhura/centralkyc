// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.centralkyc.organisation.branch;

import bw.co.centralkyc.document.DocumentRepository;
import bw.co.centralkyc.organisation.OrganisationRepository;
import jakarta.persistence.EntityNotFoundException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

/**
 * @see Branch
 */
@Repository("branchDao")
public class BranchDaoImpl
    extends BranchDaoBase
{
    
    public BranchDaoImpl(
        OrganisationRepository organisationRepository,
        DocumentRepository documentRepository,
        BranchRepository branchRepository
    ) {

        super(
            organisationRepository,
            documentRepository,
            branchRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toBranchDTO(
        Branch source,
        BranchDTO target)
    {
        // TODO verify behavior of toBranchDTO
        super.toBranchDTO(source, target);
        if(source.getOrganisation() != null)
        {
            target.setOrganisationId(source.getOrganisation().getId());
            target.setOrganisation(source.getOrganisation().getName());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BranchDTO toBranchDTO(final Branch entity)
    {
        // TODO verify behavior of toBranchDTO
        return super.toBranchDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Branch loadBranchFromBranchDTO(BranchDTO branchDTO)
    {
        if (branchDTO.getId() == null)
        {
            return  Branch.Factory.newInstance();
        }
        else
        {
            return this.branchRepository.findById(branchDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + branchDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public Branch branchDTOToEntity(BranchDTO branchDTO)
    {
        // TODO verify behavior of branchDTOToEntity
        Branch entity = this.loadBranchFromBranchDTO(branchDTO);
        this.branchDTOToEntity(branchDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void branchDTOToEntity(
        BranchDTO source,
        Branch target,
        boolean copyIfNull)
    {
        // TODO verify behavior of branchDTOToEntity
        super.branchDTOToEntity(source, target, copyIfNull);

        if(StringUtils.isNotBlank(source.getOrganisation())) {

            target.setOrganisation(organisationRepository.getReferenceById(source.getOrganisationId()));
        }
    }
}