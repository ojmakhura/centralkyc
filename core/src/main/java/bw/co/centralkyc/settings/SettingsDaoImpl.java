// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.centralkyc.settings;

import bw.co.centralkyc.document.type.DocumentType;
import bw.co.centralkyc.document.type.DocumentTypeDTO;
import bw.co.centralkyc.document.type.DocumentTypeRepository;
import jakarta.persistence.EntityNotFoundException;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Repository;

/**
 * @see Settings
 */
@Repository("settingsDao")
public class SettingsDaoImpl
    extends SettingsDaoBase
{
    
    public SettingsDaoImpl(
        DocumentTypeRepository documentTypeRepository,
        SettingsRepository settingsRepository
    ) {

        super(
            documentTypeRepository,
            settingsRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toSettingsDTO(
        Settings source,
        SettingsDTO target)
    {
        // TODO verify behavior of toSettingsDTO
        super.toSettingsDTO(source, target);
        // WARNING! No conversion for target.organisationDocuments (can't convert source.getOrganisationDocuments():bw.co.centralkyc.document.type.DocumentType to bw.co.centralkyc.document.type.DocumentTypeDTO
        if(CollectionUtils.isNotEmpty(source.getOrganisationDocuments())) {
            target.setOrganisationDocuments(this.getDocumentTypeDao().toDocumentTypeDTOCollection(source.getOrganisationDocuments()));

        }
        // WARNING! No conversion for target.individualDocuments (can't convert source.getIndividualDocuments():bw.co.centralkyc.document.type.DocumentType to bw.co.centralkyc.document.type.DocumentTypeDTO
        if(CollectionUtils.isNotEmpty(source.getIndividualDocuments())) {
            target.setIndividualDocuments(this.getDocumentTypeDao().toDocumentTypeDTOCollection(source.getIndividualDocuments()));
        }
        // WARNING! No conversion for target.orgKycDocuments (can't convert source.getOrgKycDocuments():bw.co.centralkyc.document.type.DocumentType to bw.co.centralkyc.document.type.DocumentTypeDTO
        if(CollectionUtils.isNotEmpty(source.getOrgKycDocuments())) {
            target.setOrgKycDocuments(this.getDocumentTypeDao().toDocumentTypeDTOCollection(source.getOrgKycDocuments()));
        }

        // WARNING! No conversion for target.indKycDocuments (can't convert source.getIndKycDocuments():bw.co.centralkyc.document.type.DocumentType to bw.co.centralkyc.document.type.DocumentTypeDTO
        if(CollectionUtils.isNotEmpty(source.getIndKycDocuments())) {
            target.setIndKycDocuments(this.getDocumentTypeDao().toDocumentTypeDTOCollection(source.getIndKycDocuments()));
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SettingsDTO toSettingsDTO(final Settings entity)
    {
        // TODO verify behavior of toSettingsDTO
        return super.toSettingsDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Settings loadSettingsFromSettingsDTO(SettingsDTO settingsDTO)
    {
        if (settingsDTO.getId() == null)
        {
            return  Settings.Factory.newInstance();
        }
        else
        {
            return this.settingsRepository.findById(settingsDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + settingsDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public Settings settingsDTOToEntity(SettingsDTO settingsDTO)
    {
        // TODO verify behavior of settingsDTOToEntity
        Settings entity = this.loadSettingsFromSettingsDTO(settingsDTO);
        this.settingsDTOToEntity(settingsDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void settingsDTOToEntity(
        SettingsDTO source,
        Settings target,
        boolean copyIfNull)
    {
        // TODO verify behavior of settingsDTOToEntity
        super.settingsDTOToEntity(source, target, copyIfNull);

        if(CollectionUtils.isNotEmpty(source.getOrganisationDocuments())) {

            for(DocumentTypeDTO documentTypeDTO : source.getOrganisationDocuments()) {

                DocumentType type = documentTypeDao.documentTypeDTOToEntity(documentTypeDTO);
                target.getOrganisationDocuments().add(type);
            }
        }

        if(CollectionUtils.isNotEmpty(source.getIndividualDocuments())) {

            for(DocumentTypeDTO documentTypeDTO : source.getIndividualDocuments()) {

                DocumentType type = documentTypeDao.documentTypeDTOToEntity(documentTypeDTO);
                target.getIndividualDocuments().add(type);
            }
        }

        if(CollectionUtils.isNotEmpty(source.getOrgKycDocuments())) {

            for(DocumentTypeDTO documentTypeDTO : source.getOrgKycDocuments()) {

                DocumentType type = documentTypeDao.documentTypeDTOToEntity(documentTypeDTO);
                target.getOrgKycDocuments().add(type);
            }
        }

        if(CollectionUtils.isNotEmpty(source.getIndKycDocuments())) {

            for(DocumentTypeDTO documentTypeDTO : source.getIndKycDocuments()) {

                DocumentType type = documentTypeDao.documentTypeDTOToEntity(documentTypeDTO);
                target.getIndKycDocuments().add(type);
            }
        }

    }
}