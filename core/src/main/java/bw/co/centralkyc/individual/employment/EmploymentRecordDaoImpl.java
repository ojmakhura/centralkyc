// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.centralkyc.individual.employment;

import bw.co.centralkyc.document.DocumentRepository;
import bw.co.centralkyc.individual.Individual;
import bw.co.centralkyc.individual.IndividualRepository;
import bw.co.centralkyc.individual.kyc.KycRecordRepository;
import bw.co.centralkyc.organisation.OrganisationRepository;
import jakarta.persistence.EntityNotFoundException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

/**
 * @see EmploymentRecord
 */
@Repository("employmentRecordDao")
public class EmploymentRecordDaoImpl
    extends EmploymentRecordDaoBase
{
    
    public EmploymentRecordDaoImpl(
        DocumentRepository documentRepository,
        KycRecordRepository kycRecordRepository,
        OrganisationRepository organisationRepository,
        IndividualRepository individualRepository,
        EmploymentRecordRepository employmentRecordRepository
    ) {

        super(
            documentRepository,
            kycRecordRepository,
            organisationRepository,
            individualRepository,
            employmentRecordRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toEmploymentRecordDTO(
        EmploymentRecord source,
        EmploymentRecordDTO target)
    {
        // TODO verify behavior of toEmploymentRecordDTO
        super.toEmploymentRecordDTO(source, target);
        // WARNING! No conversion for target.kycRecords (can't convert source.getKycRecords():bw.co.centralkyc.individual.kyc.KycRecord to bw.co.centralkyc.individual.kyc.KycRecordDTO

        if(source.getIndividual() != null)  {

            Individual individual = source.getIndividual();

            StringBuilder builder = new StringBuilder();
            builder.append(individual.getFirstName());

            if(StringUtils.isNotBlank(individual.getMiddleName())) {

                builder.append(' ').append(individual.getMiddleName());
            }

            builder.append(' ').append(individual.getSurname());

            target.setName(builder.toString());
            target.setIdentityNo(individual.getIdentityNo());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EmploymentRecordDTO toEmploymentRecordDTO(final EmploymentRecord entity)
    {
        // TODO verify behavior of toEmploymentRecordDTO
        return super.toEmploymentRecordDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private EmploymentRecord loadEmploymentRecordFromEmploymentRecordDTO(EmploymentRecordDTO employmentRecordDTO)
    {
        if (employmentRecordDTO.getId() == null)
        {
            return  EmploymentRecord.Factory.newInstance();
        }
        else
        {
            return this.employmentRecordRepository.findById(employmentRecordDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + employmentRecordDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public EmploymentRecord employmentRecordDTOToEntity(EmploymentRecordDTO employmentRecordDTO)
    {
        // TODO verify behavior of employmentRecordDTOToEntity
        EmploymentRecord entity = this.loadEmploymentRecordFromEmploymentRecordDTO(employmentRecordDTO);
        this.employmentRecordDTOToEntity(employmentRecordDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void employmentRecordDTOToEntity(
        EmploymentRecordDTO source,
        EmploymentRecord target,
        boolean copyIfNull)
    {
        // TODO verify behavior of employmentRecordDTOToEntity
        super.employmentRecordDTOToEntity(source, target, copyIfNull);

        // if() {

        // }
    }
}