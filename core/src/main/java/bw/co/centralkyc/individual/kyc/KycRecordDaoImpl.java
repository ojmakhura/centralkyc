// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.centralkyc.individual.kyc;

import bw.co.centralkyc.document.DocumentRepository;
import bw.co.centralkyc.individual.IndividualRepository;
import bw.co.centralkyc.individual.employment.EmploymentRecordRepository;
import jakarta.persistence.EntityNotFoundException;

import org.springframework.stereotype.Repository;

/**
 * @see KycRecord
 */
@Repository("kycRecordDao")
public class KycRecordDaoImpl
    extends KycRecordDaoBase
{
    
    public KycRecordDaoImpl(
        DocumentRepository documentRepository,
        IndividualRepository individualRepository,
        EmploymentRecordRepository employmentRecordRepository,
        KycRecordRepository kycRecordRepository
    ) {

        super(
            documentRepository,
            individualRepository,
            employmentRecordRepository,
            kycRecordRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toKycRecordDTO(
        KycRecord source,
        KycRecordDTO target)
    {
        // TODO verify behavior of toKycRecordDTO
        super.toKycRecordDTO(source, target);
        // WARNING! No conversion for target.documents (can't convert source.getDocuments():bw.co.centralkyc.document.Document to bw.co.centralkyc.document.DocumentDTO
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public KycRecordDTO toKycRecordDTO(final KycRecord entity)
    {
        // TODO verify behavior of toKycRecordDTO
        return super.toKycRecordDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private KycRecord loadKycRecordFromKycRecordDTO(KycRecordDTO kycRecordDTO)
    {
        if (kycRecordDTO.getId() == null)
        {
            return  KycRecord.Factory.newInstance();
        }
        else
        {
            return this.kycRecordRepository.findById(kycRecordDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + kycRecordDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public KycRecord kycRecordDTOToEntity(KycRecordDTO kycRecordDTO)
    {
        // TODO verify behavior of kycRecordDTOToEntity
        KycRecord entity = this.loadKycRecordFromKycRecordDTO(kycRecordDTO);
        this.kycRecordDTOToEntity(kycRecordDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void kycRecordDTOToEntity(
        KycRecordDTO source,
        KycRecord target,
        boolean copyIfNull)
    {
        // TODO verify behavior of kycRecordDTOToEntity
        super.kycRecordDTOToEntity(source, target, copyIfNull);
    }
}