// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.centralkyc.individual;

import bw.co.centralkyc.document.DocumentRepository;
import jakarta.persistence.EntityNotFoundException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

/**
 * @see Individual
 */
@Repository("individualDao")
public class IndividualDaoImpl
    extends IndividualDaoBase
{
    
    public IndividualDaoImpl(
        DocumentRepository documentRepository,
        IndividualRepository individualRepository
    ) {

        super(
            documentRepository,
            individualRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toIndividualDTO(
        Individual source,
        IndividualDTO target)
    {
        // TODO verify behavior of toIndividualDTO
        super.toIndividualDTO(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndividualDTO toIndividualDTO(final Individual entity)
    {
        // TODO verify behavior of toIndividualDTO
        return super.toIndividualDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Individual loadIndividualFromIndividualDTO(IndividualDTO individualDTO)
    {
        if (individualDTO.getId() == null)
        {
            return  Individual.Factory.newInstance();
        }
        else
        {
            return this.individualRepository.findById(individualDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + individualDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public Individual individualDTOToEntity(IndividualDTO individualDTO)
    {
        // TODO verify behavior of individualDTOToEntity
        Individual entity = this.loadIndividualFromIndividualDTO(individualDTO);
        this.individualDTOToEntity(individualDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void individualDTOToEntity(
        IndividualDTO source,
        Individual target,
        boolean copyIfNull)
    {
        // TODO verify behavior of individualDTOToEntity
        super.individualDTOToEntity(source, target, copyIfNull);
    }
    /**
     * {@inheritDoc}
     */
    @Override
    public void toIndividualListDTO(
        Individual source,
        IndividualListDTO target)
    {
        // TODO verify behavior of toIndividualListDTO
        super.toIndividualListDTO(source, target);

        StringBuilder fullName = new StringBuilder();
        if(source.getFirstName() != null) {
            fullName.append(source.getFirstName());
        }

        if(StringUtils.isNotBlank(source.getMiddleName())) {

            if(fullName.length() > 0) {
                fullName.append(" ");
            }
            fullName.append(source.getMiddleName());
        }

        if(source.getSurname() != null) {
            if(fullName.length() > 0) {
                fullName.append(" ");
            }
            fullName.append(source.getSurname());
        }
        target.setName(fullName.toString());
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public IndividualListDTO toIndividualListDTO(final Individual entity)
    {
        // TODO verify behavior of toIndividualListDTO
        return super.toIndividualListDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Individual loadIndividualFromIndividualListDTO(IndividualListDTO individualListDTO)
    {
        if (individualListDTO.getId() == null)
        {
            return  Individual.Factory.newInstance();
        }
        else
        {
            return this.individualRepository.findById(individualListDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + individualListDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public Individual individualListDTOToEntity(IndividualListDTO individualListDTO)
    {
        // TODO verify behavior of individualListDTOToEntity
        Individual entity = this.loadIndividualFromIndividualListDTO(individualListDTO);
        this.individualListDTOToEntity(individualListDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void individualListDTOToEntity(
        IndividualListDTO source,
        Individual target,
        boolean copyIfNull)
    {
        // TODO verify behavior of individualListDTOToEntity
        super.individualListDTOToEntity(source, target, copyIfNull);
    }
}