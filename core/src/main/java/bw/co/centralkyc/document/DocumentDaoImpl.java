// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.centralkyc.document;

import bw.co.centralkyc.document.type.DocumentTypeRepository;
import jakarta.persistence.EntityNotFoundException;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

/**
 * @see Document
 */
@Repository("documentDao")
public class DocumentDaoImpl
    extends DocumentDaoBase
{
    
    public DocumentDaoImpl(
        DocumentTypeRepository documentTypeRepository,
        DocumentRepository documentRepository
    ) {

        super(
            documentTypeRepository,
            documentRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toDocumentDTO(
        Document source,
        DocumentDTO target)
    {
        // TODO verify behavior of toDocumentDTO
        super.toDocumentDTO(source, target);
        // WARNING! No conversion for target.documentType (can't convert source.getDocumentType():bw.co.centralkyc.document.type.DocumentType to java.lang.String
        if(source.getDocumentType() != null) {

            target.setDocumentType(source.getDocumentType().getName());
            target.setDocumentTypeId(source.getDocumentType().getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DocumentDTO toDocumentDTO(final Document entity)
    {
        // TODO verify behavior of toDocumentDTO
        return super.toDocumentDTO(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private Document loadDocumentFromDocumentDTO(DocumentDTO documentDTO)
    {
        if (documentDTO.getId() == null)
        {
            return  Document.Factory.newInstance();
        }
        else
        {
            return this.documentRepository.findById(documentDTO.getId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + documentDTO.getId()));
        }
    }

    /**
     * {@inheritDoc}
     */
    public Document documentDTOToEntity(DocumentDTO documentDTO)
    {
        // TODO verify behavior of documentDTOToEntity
        Document entity = this.loadDocumentFromDocumentDTO(documentDTO);
        this.documentDTOToEntity(documentDTO, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void documentDTOToEntity(
        DocumentDTO source,
        Document target,
        boolean copyIfNull)
    {
        // TODO verify behavior of documentDTOToEntity
        super.documentDTOToEntity(source, target, copyIfNull);

        if(StringUtils.isNotBlank(source.getDocumentTypeId())) {

            target.setDocumentType(this.documentTypeRepository.findById(source.getDocumentTypeId())
                .orElseThrow(() -> new EntityNotFoundException("Entity not found for id: " + source.getDocumentTypeId())));
        }
    }
}