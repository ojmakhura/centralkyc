// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { DocumentTypeDTO } from '@app/model/bw/co/centralkyc/document/type/document-type-dto';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { RestApiResponse } from '@app/model/rest-api-response.model';

@Injectable({
  providedIn: 'root'
})
export class DocumentTypeApi {
    
    protected path = '/document/type';

    private http = inject(HttpClient);

    public findById(id: string | any ): Observable<RestApiResponse<DocumentTypeDTO | any>> {

        return this.http.get<RestApiResponse<DocumentTypeDTO | any>>(`${this.path}/${id}`);
    }

    public getAll(): Observable<RestApiResponse<DocumentTypeDTO[] | any[]>> {

        return this.http.get<RestApiResponse<DocumentTypeDTO[] | any[]>>(`${this.path}`);
    }

    public getAllPaged(pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<DocumentTypeDTO>[] | any[]>> {

        return this.http.get<RestApiResponse<Page<DocumentTypeDTO>[] | any[]>>(`${this.path}/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public pagedSearch(criteria: string | any , pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<DocumentTypeDTO> | any>> {

        return this.http.get<RestApiResponse<Page<DocumentTypeDTO> | any>>(`${this.path}/search/paged?criteria=${criteria}&pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public remove(id: string | any ): Observable<RestApiResponse<boolean | any>> {

        return this.http.delete<RestApiResponse<boolean | any>>(`${this.path}/${id}`);
    }

    public save(documentType: DocumentTypeDTO | any ): Observable<RestApiResponse<DocumentTypeDTO | any>> {

        return this.http.post<RestApiResponse<DocumentTypeDTO | any>>(`${this.path}`, documentType);
    }

    public search(criteria: string | any ): Observable<RestApiResponse<DocumentTypeDTO[] | any[]>> {

        return this.http.get<RestApiResponse<DocumentTypeDTO[] | any[]>>(`${this.path}/search?criteria=${criteria}`);
    }

}
