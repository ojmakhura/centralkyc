// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { DocumentDTO } from '@app/model/bw/co/centralkyc/document/document-dto';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { RestApiResponse } from '@app/model/rest-api-response.model';
import { TargetEntity } from '@app/model/bw/co/centralkyc/target-entity';

@Injectable({
  providedIn: 'root',
})
export class DocumentApi {
  protected path = '/document';

  private http = inject(HttpClient);

  public findByDocumentType(documentTypeId: string | any): Observable<RestApiResponse<DocumentDTO[] | any[]>> {
    return this.http.get<RestApiResponse<DocumentDTO[] | any[]>>(`${this.path}/documentTypeId/${documentTypeId}`);
  }

  public findById(id: string | any): Observable<RestApiResponse<DocumentDTO | any>> {
    return this.http.get<RestApiResponse<DocumentDTO | any>>(`${this.path}/${id}`);
  }

  public findByTarget(
    target: TargetEntity | any,
    targetId: string | any,
  ): Observable<RestApiResponse<DocumentDTO[] | any[]>> {
    return this.http.get<RestApiResponse<DocumentDTO[] | any[]>>(`${this.path}/target/${target}/${targetId}`);
  }

  public getAll(): Observable<RestApiResponse<DocumentDTO[] | any[]>> {
    return this.http.get<RestApiResponse<DocumentDTO[] | any[]>>(`${this.path}`);
  }

  public getAllPaged(
    pageNumber: number | any,
    pageSize: number | any,
  ): Observable<RestApiResponse<Page<DocumentDTO> | any>> {
    return this.http.get<RestApiResponse<Page<DocumentDTO> | any>>(
      `${this.path}/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`,
    );
  }

  public remove(id: string | any): Observable<RestApiResponse<boolean | any>> {
    return this.http.delete<RestApiResponse<boolean | any>>(`${this.path}/${id}`);
  }

  public save(document: DocumentDTO | any): Observable<RestApiResponse<DocumentDTO | any>> {
    return this.http.post<RestApiResponse<DocumentDTO | any>>(`${this.path}`, document);
  }

  public search(criteria: string | any): Observable<RestApiResponse<DocumentDTO[] | any[]>> {
    return this.http.get<RestApiResponse<DocumentDTO[] | any[]>>(`${this.path}/search?criteria=${criteria}`);
  }

  public upload(
    target: TargetEntity | any,
    targetId: string | any,
    documentTypeId: string | any,
    file: File | any,
  ): Observable<RestApiResponse<DocumentDTO | any>> {
    const formData: FormData = new FormData();
    formData.append('file', file);
    return this.http.post<RestApiResponse<DocumentDTO | any>>(
      `${this.path}/upload/${target}/${targetId}/type/${documentTypeId}`,
      formData,
    );
  }

  public downloadFile(id: string | any): Observable<any> {
    return this.http.get(`${this.path}/download/${id}`, {
      responseType: 'blob',
    });
  }
}
