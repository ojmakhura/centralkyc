// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, inject } from '@angular/core';
import { SearchDocumentTypesComponent } from '@app/view/document/type/search-document-types.component';
import { SearchDocumentTypesVarsForm } from '@app/view/document/type/search-document-types.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@app/@shared/loader/loader.component';
import { DocumentTypeApiStore } from '@app/store/bw/co/centralkyc/document/type/document-type-api.store';
import { MatPaginator } from '@angular/material/paginator';

@Component({
  selector: 'app-search-document-types',
  templateUrl: './search-document-types.component.html',
  styleUrls: ['./search-document-types.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class SearchDocumentTypesImplComponent extends SearchDocumentTypesComponent {

  documentTypeApiStore = inject(DocumentTypeApiStore);

  override error = this.documentTypeApiStore.error;
  override messages = this.documentTypeApiStore.messages;
  override success = this.documentTypeApiStore.success;

  constructor() {
    super();
    this.documentTypesTableSignal = this.documentTypeApiStore.dataPage
  }

  override beforeOnInit(form: SearchDocumentTypesVarsForm): SearchDocumentTypesVarsForm {
    this.documentTypeApiStore.reset();
    return form;
  }

  override doNgAfterViewInit(): void {
    this.documentTypesTable?.tablePaginator?.page?.subscribe({
      next: (paginator: MatPaginator) => {
        this.doSearch(paginator.pageIndex, paginator.pageSize);
      },
    });

    this.doSearch();
  }

  doNgOnDestroy(): void { }

  override beforeSearchDocumentTypesSearch(form: any): void {
    this.doSearch();
  }

  private doSearch(pageNumber: number = 0, pageSize: number = 10): void {
    let criteria = this.criteriaControl.value;

    this.documentTypeApiStore.pagedSearch({
      criteria: criteria ? criteria : '',
      pageNumber: pageNumber,
      pageSize: pageSize
    });
  }
}
