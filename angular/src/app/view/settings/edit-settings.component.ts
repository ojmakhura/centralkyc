// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  effect,
  inject,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  signal,
  Signal,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable, of, Subscription } from 'rxjs';
import { SearchObject } from '@app/model/search-object';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { MatChipInputEvent } from '@angular/material/chips';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { TableComponent } from '@app/components/table/table.component';
import { ColumnModel } from '@app/model/column.model';
import { ActionTemplate } from '@app/model/action-template';

import { SettingsControllerImpl } from '@app/controller/settings/settings-controller.impl';
import { SettingsDTO } from '@app/model/bw/co/centralkyc/settings/settings-dto';
import { DocumentTypeDTO } from '@app/model/bw/co/centralkyc/document/type/document-type-dto';
import { ToastrService } from 'ngx-toastr';

export class EditSettingsVarsForm {
  id?: string | any;
  createdAt?: Date | any;
  createdBy?: string | any;
  modifiedAt?: Date | any;
  modifiedBy?: string | any;
  kycDuration?: number | any;
  selectedOrgDocument?: DocumentTypeDTO | any;
  organisationDocuments?: Set<DocumentTypeDTO> | any[];
  selectedKycOrgDocument?: DocumentTypeDTO | any;
  orgKycDocuments?: Set<DocumentTypeDTO> | any[];
  selectedIndDocument?: DocumentTypeDTO | any;
  individualDocuments?: Set<DocumentTypeDTO> | any[];
  selectedKycIndDocument?: DocumentTypeDTO | any;
  indKycDocuments?: Set<DocumentTypeDTO> | any[];
}

@Component({
  selector: 'app-edit-settings-base',
  template: '',
})
export abstract class EditSettingsComponent implements OnInit, AfterViewInit, OnDestroy {
  separatorKeysCodes: number[] = [ENTER, COMMA];
  @Input() editSettingsVarsForm: EditSettingsVarsForm = {};

  editSettingsForm: FormGroup = new FormGroup({});
  hide: boolean = false;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected formBuilder: FormBuilder = inject(FormBuilder);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  dialog: MatDialog = inject(MatDialog);
  toaster: ToastrService = inject(ToastrService);
  settingsController: SettingsControllerImpl = inject(SettingsControllerImpl);
  selectedOrgDocumentFilterCtrl: FormControl = new FormControl();

  selectedOrgDocumentCompare(o1: DocumentTypeDTO | any, o2: DocumentTypeDTO | any) {
    return false;
  }

  filterSelectedOrgDocument() {}

  selectedOrgDocumentBackingList: DocumentTypeDTO[] = [];
  selectedOrgDocumentFilteredList$: Observable<DocumentTypeDTO[] | any[]> = of([]);
  selectedOrgDocumentChipControl: FormControl = new FormControl([]);

  selectedOrgDocumentDisplays: string[] = ['name'];

  // Table org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[settings.organisationDocuments] true false
  @ViewChild('organisationDocumentsTable') organisationDocumentsTable?: TableComponent<DocumentTypeDTO>;
  organisationDocumentsTableSignal: Signal<any>;
  organisationDocumentsTablePaged: boolean = true;

  organisationDocumentsTableColumns: ColumnModel[] = [
    new ColumnModel('id', 'id', false),
    new ColumnModel('code', 'code', false),
    new ColumnModel('name', 'name', false),
  ];

  organisationDocumentsTableColumnsActions: ActionTemplate[] = [];

  showOrganisationDocumentsActions = false;

  selectedKycOrgDocumentFilterCtrl: FormControl = new FormControl();

  selectedKycOrgDocumentCompare(o1: DocumentTypeDTO | any, o2: DocumentTypeDTO | any) {
    return false;
  }

  filterSelectedKycOrgDocument() {}

  selectedKycOrgDocumentBackingList: DocumentTypeDTO[] = [];
  selectedKycOrgDocumentFilteredList$: Observable<DocumentTypeDTO[] | any[]> = of([]);
  selectedKycOrgDocumentChipControl: FormControl = new FormControl([]);

  selectedKycOrgDocumentDisplays: string[] = ['name'];

  // Table org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[settings.orgKycDocuments] true false
  @ViewChild('orgKycDocumentsTable') orgKycDocumentsTable?: TableComponent<DocumentTypeDTO>;
  orgKycDocumentsTableSignal: Signal<any>;
  orgKycDocumentsTablePaged: boolean = true;

  orgKycDocumentsTableColumns: ColumnModel[] = [
    new ColumnModel('id', 'id', false),
    new ColumnModel('code', 'code', false),
    new ColumnModel('name', 'name', false),
  ];

  orgKycDocumentsTableColumnsActions: ActionTemplate[] = [];

  showOrgKycDocumentsActions = false;

  selectedIndDocumentFilterCtrl: FormControl = new FormControl();

  selectedIndDocumentCompare(o1: DocumentTypeDTO | any, o2: DocumentTypeDTO | any) {
    return false;
  }

  filterSelectedIndDocument() {}

  selectedIndDocumentBackingList: DocumentTypeDTO[] = [];
  selectedIndDocumentFilteredList$: Observable<DocumentTypeDTO[] | any[]> = of([]);
  selectedIndDocumentChipControl: FormControl = new FormControl([]);

  selectedIndDocumentDisplays: string[] = ['name'];

  // Table org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[settings.individualDocuments] true false
  @ViewChild('individualDocumentsTable') individualDocumentsTable?: TableComponent<DocumentTypeDTO>;
  individualDocumentsTableSignal: Signal<any>;
  individualDocumentsTablePaged: boolean = true;

  individualDocumentsTableColumns: ColumnModel[] = [
    new ColumnModel('id', 'id', false),
    new ColumnModel('code', 'code', false),
    new ColumnModel('name', 'name', false),
  ];

  individualDocumentsTableColumnsActions: ActionTemplate[] = [];

  showIndividualDocumentsActions = false;

  selectedKycIndDocumentFilterCtrl: FormControl = new FormControl();

  selectedKycIndDocumentCompare(o1: DocumentTypeDTO | any, o2: DocumentTypeDTO | any) {
    return false;
  }

  filterSelectedKycIndDocument() {}

  selectedKycIndDocumentBackingList: DocumentTypeDTO[] = [];
  selectedKycIndDocumentFilteredList$: Observable<DocumentTypeDTO[] | any[]> = of([]);
  selectedKycIndDocumentChipControl: FormControl = new FormControl([]);

  selectedKycIndDocumentDisplays: string[] = ['name'];

  // Table org.andromda.cartridges.angular.metafacades.AngularParameterLogicImpl[settings.indKycDocuments] true false
  @ViewChild('indKycDocumentsTable') indKycDocumentsTable?: TableComponent<DocumentTypeDTO>;
  indKycDocumentsTableSignal: Signal<any>;
  indKycDocumentsTablePaged: boolean = true;

  indKycDocumentsTableColumns: ColumnModel[] = [
    new ColumnModel('id', 'id', false),
    new ColumnModel('code', 'code', false),
    new ColumnModel('name', 'name', false),
  ];

  indKycDocumentsTableColumnsActions: ActionTemplate[] = [];

  showIndKycDocumentsActions = false;

  loaderMessage: Signal<string> = signal('');
  messages: Signal<any> = signal({});
  success: Signal<boolean> = signal(false);
  loading: Signal<boolean> = signal(false);
  error: Signal<boolean> = signal(false);
  selected: any = null;

  editSettingsFormValueSubscription?: Subscription;

  constructor() {
    effect(() => {
      let messages = this.messages();

      if (this.success() && !this.loading()) {
        this.toaster.success(messages[0]);
      }

      if (this.error() && !this.loading()) {
        this.toaster.error(messages[0]);
      }
    });
  }

  abstract beforeOnInit(form: EditSettingsVarsForm): EditSettingsVarsForm;

  ngOnInit() {
    let form: EditSettingsVarsForm = this.beforeOnInit(new EditSettingsVarsForm());
    this.editSettingsForm = this.newForm(form);

    this.editSettingsFormValueSubscription = this.editSettingsForm.valueChanges.subscribe((change: any) => {
      this.handleFormChanges(change);
    });

    this.afterOnInit();
  }

  handleFormChanges(change: any): void {}

  editSettingsFormReset() {
    this.editSettingsForm.reset();
    this.editSettingsForm.markAsPristine();

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.settingsController.resetUseCaseScope();
  }

  newForm(editSettingsVarsForm: EditSettingsVarsForm): FormGroup {
    return this.formBuilder.group({
      id: [{ value: this.editSettingsVarsForm.id, disabled: false }, [Validators.required]],
      createdAt: [{ value: this.editSettingsVarsForm.createdAt, disabled: false }, [Validators.required]],
      createdBy: [{ value: this.editSettingsVarsForm.createdBy, disabled: false }, [Validators.required]],
      modifiedAt: [{ value: this.editSettingsVarsForm.modifiedAt, disabled: false }, [Validators.required]],
      modifiedBy: [{ value: this.editSettingsVarsForm.modifiedBy, disabled: false }, [Validators.required]],
      kycDuration: [{ value: this.editSettingsVarsForm.kycDuration, disabled: false }, [Validators.required]],
      selectedOrgDocument: [{ value: this.editSettingsVarsForm.selectedOrgDocument, disabled: false }],
      selectedKycOrgDocument: [{ value: this.editSettingsVarsForm.selectedKycOrgDocument, disabled: false }],
      selectedIndDocument: [{ value: this.editSettingsVarsForm.selectedIndDocument, disabled: false }],
      selectedKycIndDocument: [{ value: this.editSettingsVarsForm.selectedKycIndDocument, disabled: false }],
    });
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    if (this.editSettingsFormValueSubscription) {
      this.editSettingsFormValueSubscription.unsubscribe();
    }
  }

  /**
   * This method may be overwritten
   */
  beforeEditSettingsSave(form: any): void {}

  /**
   * This method may be overwritten
   */
  afterEditSettingsSave(form: any): void {}

  /**
   * This method may be overwritten
   */
  get editSettingsSaveSettings(): SettingsDTO {
    return {} as SettingsDTO;
  }

  editSettingsSave(): void {
    let form: any = {
      settings: this.editSettingsSaveSettings,
    };

    this.beforeEditSettingsSave(form);

    this.settingsController.editSettingsSave(form.settings);
    this.afterEditSettingsSave(form);
  }

  get editSettingsVarsFormControl(): FormGroup {
    return this.getGroupControl('editSettingsVarsForm');
  }

  get idControl(): FormControl {
    return this.editSettingsForm?.get('id') as FormControl;
  }

  get createdAtControl(): FormControl {
    return this.editSettingsForm?.get('createdAt') as FormControl;
  }

  get createdByControl(): FormControl {
    return this.editSettingsForm?.get('createdBy') as FormControl;
  }

  get modifiedAtControl(): FormControl {
    return this.editSettingsForm?.get('modifiedAt') as FormControl;
  }

  get modifiedByControl(): FormControl {
    return this.editSettingsForm?.get('modifiedBy') as FormControl;
  }

  get kycDurationControl(): FormControl {
    return this.editSettingsForm?.get('kycDuration') as FormControl;
  }

  createDocumentTypeDTOGroup(value?: DocumentTypeDTO): FormGroup {
    return this.formBuilder.group({
      code: [value?.code],
      name: [value?.name],
      description: [value?.description],
      id: [value?.id],
      createdBy: [value?.createdBy],
      createdAt: [value?.createdAt],
      modifiedBy: [value?.modifiedBy],
      modifiedAt: [value?.modifiedAt],
    });
  }

  createDocumentTypeDTOArray(values?: DocumentTypeDTO[]): FormArray {
    if (values) {
      let formArray: FormArray = this.formBuilder.array([]);
      values?.forEach((value) => formArray.push(this.createDocumentTypeDTOGroup(value)));

      return formArray;
    } else {
      return new FormArray([] as any);
    }
  }

  get selectedOrgDocumentControl(): FormControl {
    return this.editSettingsForm?.get('selectedOrgDocument') as FormControl;
  }

  selectedOrgDocumentAddDialog() {}

  selectedOrgDocumentClear() {}

  selectedOrgDocumentSelected(event: MatCheckboxChange, row: number) {}

  selectedOrgDocumentSearch() {}

  addSelectedSelectedOrgDocument() {}

  get organisationDocumentsControl(): FormArray {
    return this.editSettingsForm?.get('organisationDocuments') as FormArray;
  }


  get selectedKycOrgDocumentControl(): FormControl {
    return this.editSettingsForm?.get('selectedKycOrgDocument') as FormControl;
  }

  selectedKycOrgDocumentAddDialog() {}

  selectedKycOrgDocumentClear() {}

  selectedKycOrgDocumentSelected(event: MatCheckboxChange, row: number) {}

  selectedKycOrgDocumentSearch() {}

  addSelectedSelectedKycOrgDocument() {}

  get orgKycDocumentsControl(): FormArray {
    return this.editSettingsForm?.get('orgKycDocuments') as FormArray;
  }

  get selectedIndDocumentControl(): FormControl {
    return this.editSettingsForm?.get('selectedIndDocument') as FormControl;
  }

  selectedIndDocumentAddDialog() {}

  selectedIndDocumentClear() {}

  selectedIndDocumentSelected(event: MatCheckboxChange, row: number) {}

  selectedIndDocumentSearch() {}

  addSelectedSelectedIndDocument() {}

  get individualDocumentsControl(): FormArray {
    return this.editSettingsForm?.get('individualDocuments') as FormArray;
  }

  get selectedKycIndDocumentControl(): FormControl {
    return this.editSettingsForm?.get('selectedKycIndDocument') as FormControl;
  }

  selectedKycIndDocumentAddDialog() {}

  selectedKycIndDocumentClear() {}

  selectedKycIndDocumentSelected(event: MatCheckboxChange, row: number) {}

  selectedKycIndDocumentSearch() {}

  addSelectedSelectedKycIndDocument() {}

  get indKycDocumentsControl(): FormArray {
    return this.editSettingsForm?.get('indKycDocuments') as FormArray;
  }

  getItemControl(name: string): FormControl {
    return this.editSettingsForm.get(name) as FormControl;
  }

  getGroupControl(name: string): FormGroup {
    return this.editSettingsForm.get(name) as FormGroup;
  }

  getArrayControl(name: string): FormArray {
    return this.editSettingsForm.get(name) as FormArray;
  }

  setEditSettingsFormValue(form: any) {
    if (form.id) {
      this.editSettingsForm?.get('id')?.setValue(form.id);
    }
    if (form.createdAt) {
      this.editSettingsForm?.get('createdAt')?.setValue(form.createdAt);
    }
    if (form.createdBy) {
      this.editSettingsForm?.get('createdBy')?.setValue(form.createdBy);
    }
    if (form.modifiedAt) {
      this.editSettingsForm?.get('modifiedAt')?.setValue(form.modifiedAt);
    }
    if (form.modifiedBy) {
      this.editSettingsForm?.get('modifiedBy')?.setValue(form.modifiedBy);
    }
    if (form.kycDuration) {
      this.editSettingsForm?.get('kycDuration')?.setValue(form.kycDuration);
    }
    if (form.selectedOrgDocument) {
    }
    if (form.selectedKycOrgDocument) {
    }
    if (form.selectedIndDocument) {
    }
    if (form.selectedKycIndDocument) {
    }
  }

  onAddToOrgDocumentsClick() {}

  onAddToKycOrgDocumentsClick() {}

  onAddToIndDocumentsClick() {}

  onAddToKycIndDocumentsClick() {}
}
