// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, computed, effect, inject } from '@angular/core';
import { EditSettingsComponent } from '@app/view/settings/edit-settings.component';
import { EditSettingsVarsForm } from '@app/view/settings/edit-settings.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@app/@shared/loader/loader.component';
import { SettingsApiStore } from '@app/store/bw/co/centralkyc/settings/settings-api.store';
import { DocumentTypeApiStore } from '@app/store/bw/co/centralkyc/document/type/document-type-api.store';
import { DocumentTypeApi } from '@app/service/bw/co/centralkyc/document/type/document-type-api';
import { of } from 'rxjs';
import { SettingsDTO } from '@app/model/bw/co/centralkyc/settings/settings-dto';

@Component({
  selector: 'app-edit-settings',
  templateUrl: './edit-settings.component.html',
  styleUrls: ['./edit-settings.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class EditSettingsImplComponent extends EditSettingsComponent {
  settingApiStore = inject(SettingsApiStore);
  documentTypeApiStore = inject(DocumentTypeApiStore);
  documentTypeApi = inject(DocumentTypeApi)

  override organisationDocumentsTableSignal = computed(() => this.settingApiStore?.data()?.organisationDocuments || []);
  override individualDocumentsTableSignal = computed(() => this.settingApiStore?.data()?.individualDocuments || []);
  override orgKycDocumentsTableSignal = computed(() => this.settingApiStore?.data()?.kycOrganisationDocuments || []);
  override indKycDocumentsTableSignal = computed(() => this.settingApiStore?.data()?.kycIndividualDocuments || []);

  constructor() {
    super();

    effect(() => {
      let settings = this.settingApiStore.data();
      this.editSettingsForm.patchValue(settings);
    });
  }

  override beforeOnInit(form: EditSettingsVarsForm): EditSettingsVarsForm {
    this.settingApiStore.reset();
    this.settingApiStore.getAll();

    this.route.queryParams.subscribe((params: any) => {
      if (params.id) {
        this.settingApiStore.findById(params);
      }
    });
    return form;
  }

  doNgOnDestroy(): void {}

  private getSettings(value: any): SettingsDTO {

    let settings: SettingsDTO = {  };
    settings.createdAt = value.createdAt;
    settings.createdBy = value.createdBy;
    settings.modifiedAt = value.modifiedAt;
    settings.modifiedBy = value.modifiedBy;
    settings.id = value.id;
    settings.kycDuration = value.kycDuration;
    settings.organisationDocuments = value.organisationDocuments || [];
    settings.individualDocuments = value.individualDocuments || [];
    settings.indKycDocuments = value.indKycDocuments || [];
    settings.orgKycDocuments = value.orgKycDocuments || [];

    return settings;

  }

  override beforeEditSettingsSave(form: any): void {
    let val: any = this.editSettingsForm.value;
    let settings = this.getSettings(val);

    this.settingApiStore.save({ setttings: settings });
  }

  override filterSelectedOrgDocument(): void {
    const search = this.selectedOrgDocumentFilterCtrl.value?.toLowerCase() || '';
    this.documentTypeApi.search(search).subscribe((data) => {
      this.selectedOrgDocumentFilteredList$ = of(data.data || []);
    });
  }

  override filterSelectedKycOrgDocument(): void {
    const search = this.selectedKycOrgDocumentFilterCtrl.value?.toLowerCase() || '';
    this.documentTypeApi.search(search).subscribe((data) => {
      this.selectedKycOrgDocumentFilteredList$ = of(data.data || []);
    });
  }

  override filterSelectedIndDocument(): void {
    const search = this.selectedIndDocumentFilterCtrl.value?.toLowerCase() || '';
    this.documentTypeApi.search(search).subscribe((data) => {
      this.selectedIndDocumentFilteredList$ = of(data.data || []);
    });
  }

  override filterSelectedKycIndDocument(): void {
    const search = this.selectedKycIndDocumentFilterCtrl.value?.toLowerCase() || '';
    this.documentTypeApi.search(search).subscribe((data) => {
      this.selectedKycIndDocumentFilteredList$ = of(data.data || []);
    });
  }

  override onAddToIndDocumentsClick() {

    console.log(this.selectedIndDocumentControl.value);
    let val: any = this.editSettingsForm.value;
    let settings = this.getSettings(val)

    let found = settings.individualDocuments?.find(d => d.id === this.selectedIndDocumentControl.value.id);
    if(!found) {
      settings.individualDocuments?.push(this.selectedIndDocumentControl.value);
    }

    this.settingApiStore.save({ setttings: settings });
    this.selectedIndDocumentControl.setValue(null);
  }

  override onAddToKycOrgDocumentsClick() {

    console.log(this.selectedKycOrgDocumentControl.value);
    let val: any = this.editSettingsForm.value;
    let settings: SettingsDTO = this.getSettings(val)

    let found = settings.orgKycDocuments?.find(d => d.id === this.selectedKycOrgDocumentControl.value.id);
    if(!found) {
      settings.orgKycDocuments?.push(this.selectedKycOrgDocumentControl.value);
    }

    this.settingApiStore.save({ setttings: settings });
    this.selectedKycOrgDocumentControl.setValue(null);
  }

  override onAddToOrgDocumentsClick() {

    console.log(this.selectedOrgDocumentControl.value);
    let val: any = this.editSettingsForm.value;
    let settings: SettingsDTO = this.getSettings(val)

    let found = settings.organisationDocuments?.find(d => d.id === this.selectedOrgDocumentControl.value.id);
    if(!found) {
      settings.organisationDocuments?.push(this.selectedOrgDocumentControl.value);
    }

    this.settingApiStore.save({ setttings: settings });
    this.selectedOrgDocumentControl.setValue(null);
  }

  override onAddToKycIndDocumentsClick() {

    console.log(this.selectedKycIndDocumentControl.value);
    let val: any = this.editSettingsForm.value;
    let settings: SettingsDTO = this.getSettings(val)

    let found = settings.indKycDocuments?.find(d => d.id === this.selectedKycIndDocumentControl.value.id);
    if(!found) {
      settings.indKycDocuments?.push(this.selectedKycIndDocumentControl.value);
    }

    this.settingApiStore.save({ setttings: settings });
    this.selectedKycIndDocumentControl.setValue(null);
  }
}
