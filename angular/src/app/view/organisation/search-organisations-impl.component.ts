// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, inject } from '@angular/core';
import { SearchOrganisationsComponent } from '@app/view/organisation/search-organisations.component';
import { SearchOrganisationsVarsForm } from '@app/view/organisation/search-organisations.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@app/@shared/loader/loader.component';
import { OrganisationApiStore } from '@app/store/bw/co/centralkyc/organisation/organisation-api.store';
import { MatPaginator } from '@angular/material/paginator';
import { OrganisationSearchCriteria } from '@app/model/bw/co/centralkyc/organisation/organisation-search-criteria';
import { SearchObject } from '@app/model/search-object';

@Component({
  selector: 'app-search-organisations',
  templateUrl: './search-organisations.component.html',
  styleUrls: ['./search-organisations.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class SearchOrganisationsImplComponent extends SearchOrganisationsComponent {
  organisationApiStore = inject(OrganisationApiStore);

  override error = this.organisationApiStore.error;
  override messages = this.organisationApiStore.messages;
  override success = this.organisationApiStore.success;

  constructor() {
    super();
    this.organisationsTableSignal = this.organisationApiStore.dataPage;
  }

  override beforeOnInit(form: SearchOrganisationsVarsForm): SearchOrganisationsVarsForm {
    this.organisationApiStore.reset();
    return form;
  }

  override doNgAfterViewInit(): void {
    this.organisationsTable?.tablePaginator?.page?.subscribe({
      next: (paginator: MatPaginator) => {
        this.doSearch(paginator.pageIndex, paginator.pageSize);
      },
    });

    this.doSearch();
  }

  doNgOnDestroy(): void {}

  override beforeSearchOrganisationsSearch(form: any): void {
    this.doSearch();
  }

  private doSearch(pageNumber: number = 0, pageSize: number = 10): void {
    let value = this.criteriaControl.value;

    let criteria = new SearchObject<OrganisationSearchCriteria>()
    criteria.pageNumber = pageNumber;
    criteria.pageSize = pageSize;
    criteria.criteria = value;

    this.organisationApiStore.pagedSearch({
      criteria
    });
  }
}
