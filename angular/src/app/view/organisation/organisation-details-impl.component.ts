// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, effect, inject, signal } from '@angular/core';
import { OrganisationDetailsComponent } from '@app/view/organisation/organisation-details.component';
import { OrganisationDetailsVarsForm } from '@app/view/organisation/organisation-details.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@app/@shared/loader/loader.component';
import { OrganisationApiStore } from '@app/store/bw/co/centralkyc/organisation/organisation-api.store';
import { BranchApiStore } from '@app/store/bw/co/centralkyc/organisation/branch/branch-api.store';
import { BranchDTO } from '@app/model/bw/co/centralkyc/organisation/branch/branch-dto';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';
import { PageEvent } from '@angular/material/paginator';
import { Router } from '@angular/router';
import { DialogComponent } from '@app/components/dialog/dialog.component';
import { BranchEditorImplComponent } from '@app/components/organisation/branch/branch-editor-impl.component';
import { BranchApi } from '@app/service/bw/co/centralkyc/organisation/branch/branch-api';
import { ColumnModel } from '@app/model/column.model';
import { ActionTemplate } from '@app/model/action-template';

@Component({
  selector: 'app-organisation-details',
  templateUrl: './organisation-details.component.html',
  styleUrls: ['./organisation-details.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class OrganisationDetailsImplComponent extends OrganisationDetailsComponent {
  organisationApiStore = inject(OrganisationApiStore);
  branchApiStore = inject(BranchApiStore);
  branchApi = inject(BranchApi);

  override error = this.organisationApiStore.error;
  override messages = this.organisationApiStore.messages;
  override success = this.organisationApiStore.success;
  organisation = this.organisationApiStore.data;

  // Branches related properties
  branches = this.branchApiStore.dataList;
  branchesLoading = this.branchApiStore.loading;
  currentPage = signal(0);
  pageSize = signal(10);
  totalBranches = signal(0);

  constructor() {
    super();

    // Effect to load branches when organisation is loaded
    effect(() => {
      const org = this.organisation();
      if (org?.id) {
        this.loadBranches();
      }
    });

    // Effect to update total branches count
    effect(() => {
      const branchList = this.branches();
      if (branchList) {
        this.totalBranches.set(branchList.length);
      }
    });
  }

  override beforeOnInit(form: OrganisationDetailsVarsForm): OrganisationDetailsVarsForm {
    this.organisationApiStore.reset();
    this.branchApiStore.reset();

    this.route.queryParams.subscribe((params: any) => {
      if (params.id) {
        this.organisationApiStore.findById(params);
      }
    });
    return form;
  }

  // Branches Management Methods
  loadBranches(): void {
    const org = this.organisation();
    if (org?.id) {
      this.branchApiStore.findByOrganisation({ organisationId: org.id });
    }
  }

  refreshBranches(): void {
    this.loadBranches();
  }

  doEditBranch(branch: BranchDTO): void {
    const dialogRef = this.dialog.open(DialogComponent<BranchEditorImplComponent>, <MatDialogConfig>{
      hasBackdrop: true,
      closeOnNavigation: true,
      disableClose: true,
      width: '800px',
      data: {
        component: BranchEditorImplComponent,
        title: 'Edit Section',
        inputs: {
          branchEditorForm: branch,
        },
        actions: [
          {
            id: 'save',
            label: 'Save',
            icon: 'save',
            tooltip: 'Save Section',
          },
        ],
      },
    });

    dialogRef.afterClosed().subscribe({
      next: (data) => {
        console.log('Dialog closed with data:', data);
        if (data?.action === 'save') {
          this.branchApi.save(data.value).subscribe({
            next: (field) => {
              // this.toastr.success('Field saved successfully');
              this.loadBranches();
            },
            error: (err) => {
              console.error('Error saving field:', err);
              // this.toastr.error('Error saving field');
            },
          });
        }
      },
    });
  }

  addNewBranch(): void {
    let branch = new BranchDTO();
    const org = this.organisation();
    branch.organisationId = org.id;
    branch.organisation = org.name;

    this.doEditBranch(branch);
  }

  deleteBranch(branchId: string): void {
    if (confirm('Are you sure you want to delete this branch?')) {
      this.branchApiStore.remove({ id: branchId });
      // Reload branches after deletion
      setTimeout(() => {
        this.loadBranches();
      }, 1000);
    }
  }

  onPageChange(event: PageEvent): void {
    this.currentPage.set(event.pageIndex);
    this.pageSize.set(event.pageSize);
    // Here you would typically load the specific page of branches
    // For now, we'll just update the pagination state
  }

  doNgOnDestroy(): void {}

  branchesTableColumns: ColumnModel[] = [
    new ColumnModel('code', 'code', false),
    new ColumnModel('name', 'name', false),
  ];

  branchesTableColumnsActions: ActionTemplate[] = [
    {
      id: 'branch-edit',
      label: 'edit',
      icon: 'edit',
      tooltip: 'edit',
    },
    {
      id: 'branch-delete',
      label: 'delete',
      icon: 'delete',
      tooltip: 'delete',
    },
  ];

  branchesTableActionClicked(event: any): void {
    console.log(event);

    switch (event.action) {
      case 'branch-edit':
        // TODO: Implement the action
        this.doEditBranch(event.row);
        break;
      case 'branch-delete':
        // TODO: Implement the action
        this.deleteBranch(event.id);
        break;
    }
  }

  override organisationDetailsEdit(): void {
    this.router.navigate(['/organisation/edit'], { queryParams: { id: this.organisation().id } });
  }
}
