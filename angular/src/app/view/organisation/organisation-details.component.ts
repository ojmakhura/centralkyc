// Generated by andromda-angular cartridge (view\view.component.ts.vsl) DO NOT EDIT
import {
  Component,
  OnInit,
  effect,
  inject,
  ViewChild,
  Input,
  Output,
  EventEmitter,
  AfterViewInit,
  signal,
  Signal,
  OnDestroy,
} from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { FormGroup, FormControl, FormArray, FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';
import { formatDate } from '@angular/common';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatSelectChange } from '@angular/material/select';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { UseCaseScope } from '@app/utils/use-case-scope';
import { Store, select } from '@ngrx/store';
import { Observable, of, Subscription } from 'rxjs';
import { SearchObject } from '@app/model/search-object';
import { MatDialog } from '@angular/material/dialog';
import { MatTableDataSource } from '@angular/material/table';
import { MatChipInputEvent } from '@angular/material/chips';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { TableComponent } from '@app/components/table/table.component';
import { ColumnModel } from '@app/model/column.model';
import { ActionTemplate } from '@app/model/action-template';

import { GeneralStatus } from '@app/model/bw/co/centralkyc/general-status';
import { OrganisationDTO } from '@app/model/bw/co/centralkyc/organisation/organisation-dto';
import { OrganisationControllerImpl } from '@app/controller/organisation/organisation-controller.impl';
import { ToastrService } from 'ngx-toastr';

export class OrganisationDetailsVarsForm {
  id?: string | any;
  createdAt?: Date | any;
  createdBy?: string | any;
  modifiedAt?: Date | any;
  modifiedBy?: string | any;
  status?: GeneralStatus | any;
  registrationNo?: string | any;
  code?: string | any;
  name?: string | any;
  description?: string | any;
  phoneNumbers?: any[] | any[];
  postalAddress?: string | any;
  physicalAddress?: string | any;
}

@Component({
  selector: 'app-organisation-details-base',
  template: '',
})
export abstract class OrganisationDetailsComponent implements OnInit, AfterViewInit, OnDestroy {
  separatorKeysCodes: number[] = [ENTER, COMMA];
  @Input() organisationDetailsVarsForm: OrganisationDetailsVarsForm = {};

  // organisationDetailsForm: FormGroup = new FormGroup({});
  hide: boolean = false;
  protected route: ActivatedRoute = inject(ActivatedRoute);
  protected router: Router = inject(Router);
  protected formBuilder: FormBuilder = inject(FormBuilder);
  protected useCaseScope: UseCaseScope = inject(UseCaseScope);
  dialog: MatDialog = inject(MatDialog);
  toaster: ToastrService = inject(ToastrService);
  organisationController: OrganisationControllerImpl = inject(OrganisationControllerImpl);

  GeneralStatusT: any = GeneralStatus;
  GeneralStatusOptions = Object.keys(this.GeneralStatusT);
  loaderMessage: Signal<string> = signal('');
  messages: Signal<any> = signal({});
  success: Signal<boolean> = signal(false);
  loading: Signal<boolean> = signal(false);
  error: Signal<boolean> = signal(false);
  selected: any = null;

  organisationDetailsFormValueSubscription?: Subscription;

  constructor() {
    effect(() => {
      let messages = this.messages();

      if (this.success() && !this.loading()) {
        this.toaster.success(messages[0]);
      }

      if (this.error() && !this.loading()) {
        this.toaster.error(messages[0]);
      }
    });
  }

  abstract beforeOnInit(form: OrganisationDetailsVarsForm): OrganisationDetailsVarsForm;

  ngOnInit() {
    let form: OrganisationDetailsVarsForm = this.beforeOnInit(new OrganisationDetailsVarsForm());

    this.afterOnInit();
  }

  organisationDetailsFormReset() {

    if (this.router.url.substring(0, this.router.url.indexOf('?'))) {
      this.router.navigate([this.router.url.substring(0, this.router.url.indexOf('?'))]);
    } else {
      this.router.navigate([this.router.url]);
    }
  }

  afterOnInit(): void {}

  doNgAfterViewInit(): void {}

  ngAfterViewInit() {
    this.doNgAfterViewInit();
    this.organisationController.resetUseCaseScope();
  }

  abstract doNgOnDestroy(): void;

  ngOnDestroy() {
    this.doNgOnDestroy();
    if (this.organisationDetailsFormValueSubscription) {
      this.organisationDetailsFormValueSubscription.unsubscribe();
    }
  }

  /**
   * This method may be overwritten
   */
  beforeOrganisationDetailsEdit(form: any): void {}

  /**
   * This method may be overwritten
   */
  afterOrganisationDetailsEdit(form: any): void {}

  /**
   * This method may be overwritten
   */
  get organisationDetailsEditId(): string {
    return {} as string;
  }

  organisationDetailsEdit(): void {
    let form: any = {
      id: this.organisationDetailsEditId,
    };

    this.beforeOrganisationDetailsEdit(form);

    this.organisationController.organisationDetailsEdit(form.id);
    this.afterOrganisationDetailsEdit(form);
  }
}
