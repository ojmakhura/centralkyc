// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, computed, effect, inject, Input } from '@angular/core';
import { EditIndividualComponent } from '@app/view/individual/edit-individual.component';
import { EditIndividualVarsForm } from '@app/view/individual/edit-individual.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@app/@shared/loader/loader.component';
import { OrganisationApiStore } from '@app/store/bw/co/centralkyc/organisation/organisation-api.store';
import { BranchApiStore } from '@app/store/bw/co/centralkyc/organisation/branch/branch-api.store';
import { OrganisationListDTO } from '@app/model/bw/co/centralkyc/organisation/organisation-list-dto';
import { BranchDTO } from '@app/model/bw/co/centralkyc/organisation/branch/branch-dto';

@Component({
  selector: 'app-edit-individual',
  templateUrl: './edit-individual.component.html',
  styleUrls: ['./edit-individual.component.scss'],
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, TranslateModule, MaterialModule, LoaderComponent],
})
export class EditIndividualImplComponent extends EditIndividualComponent {
  @Input() id: string | any;

  organisationApiStore = inject(OrganisationApiStore);
  branchApiStore = inject(BranchApiStore);

  override loading = computed(() => this.individualApiStore.loading() || this.organisationApiStore.loading() || this.branchApiStore.loading());

  override error = this.individualApiStore.error;
  override messages = this.individualApiStore.messages;
  override success = this.individualApiStore.success;

  individual = this.individualApiStore.data;

  constructor() {
    super();

    effect(() => {
      let individual = this.individualApiStore.data();
      this.editIndividualForm.patchValue(individual);

      if (individual.hasUser) {

        if (individual.organisation?.id) {

          this.organisationApiStore.search({ criteria: individual.organisation.name || '' });
          this.organisationControl.setValue(individual.organisation);

          this.branchApiStore.findByOrganisation({ organisationId: individual.organisation.id });
        }

      }
    });
  }

  override beforeOnInit(form: EditIndividualVarsForm): EditIndividualVarsForm {
    this.individualApiStore.reset();

    this.route.queryParams.subscribe((params: any) => {
      if (params.id) {
        this.individualApiStore.findById(params);
      }
    });

    return form;
  }

  override doNgAfterViewInit(): void {
    this.hasUserControl.valueChanges.subscribe((value: any) => {
      if (!value) {
        this.organisationControl.setValue(null);
        this.branchControl.setValue(null);
      }
    });
  }

  doNgOnDestroy(): void { }

  override beforeEditIndividualSave(form: any): void {
    this.individualApiStore.save({ individual: this.editIndividualForm.value });
  }

  override filterOrganisation(): void {
    let criteria = this.organisationFilterCtrl.value || '';
    this.organisationApiStore.search({ criteria: criteria });
  }

  override filterBranch(): void {
    let criteria = this.branchFilterCtrl.value || '';
    let organisationId = this.organisationControl.value?.id;

    this.branchApiStore.findByOrganisation({ organisationId: organisationId });
  }

  override organisationCompare(o1: OrganisationListDTO | any, o2: OrganisationListDTO | any) {
    return o1 && o2 ? o1.id === o2.id : false;
  }

  override branchCompare(o1: BranchDTO | any, o2: BranchDTO | any) {
      return o1 && o2 ? o1.id === o2.id : false;
  }
}
